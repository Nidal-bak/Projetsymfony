// contient le style a afficher pour le format desktop
// comme le style définit ici est chargé après le fichier de style tablet/global.scss, alors
// les règles dans ce fichier (desktop/global.scss) surcharge celles définit dans tablet/global.scss

body{

  /*STYLES GENERAUX*/
*{
  font-family: Avenir, sans-serif;
  padding: 0px;
  margin: 0px;
  text-align: justify;
  box-sizing: border-box;
}

p{
  font-size: 1em;
  line-height: 1.5em;
}
a{
  text-decoration: none;
  color: #000;
}
/*HEADER*/
header{
  width: 100%;
  padding: 20px 0px;
  background: url("https://www.letelegramme.fr/images/2018/08/03/la-meteo-devrait-etre-favorable-a-de-belles-observations_4101193.jpg") #4f4f4f;
  box-shadow: 0px 0px 15px #333;
}
header{
  border-bottom: 2px solid #fff;
  height: 120px;
}
header h1{
  color: white;
  font-size: 1.5em;
  width: 90%;
  margin: 0 auto;
  text-align: center;
}

/*SECTIONS*/

/*Nos éléments section vont tous être des conteneurs flexibles et nous allons choisir l’axe horizontal comme axe principal avec justify-content : center*/
/*Nos éléments section sont des conteneurs flexibles avec  display: flex*/
section{
  font-size: 15px;
  display: flex; 
  flex-flow: row wrap;
  justify-content: center;
  width: 100%;
  padding-bottom: 20px;
  margin: 20px auto;
  box-shadow: 0px 0px 10px #bbb;
  background-color: #fff;
}
section h2{
  margin: 20px 0;
  width: 90%;
}
section > div{
  width: 90%;
}

/*SECTION INFOS*/

.photo{
  text-align: center;
}
.photo img{
  width: 150px;
  height: 150px;
  border: 3px solid #fff;
  box-shadow: 0px 0px 10px #777;
  border-radius: 50%;
  margin-top: -80px;
}
.prez{
  border-bottom: 2px dashed #ccc;
}
.prez a{
  display: block;
  text-align: center;
  padding: 10px;
  margin: 10px auto 30px auto;
  color: #fff;
  background-color: #EA0;
  box-shadow: 0px 0px 10px #ccc;
  border-radius: 5px;
}

/*On cible ensuite le premier paragraphe de chaque conteneur flexible avec .
contact-flex p:first-child pour lui attribuer une largeur de base égale à 40% du conteneur flexible et le dernier avec .
contact-flex p:last-child pour lui attribuer une largeur de base égale à 60% du conteneur flexible. 
Cela va permettre aux différents couples d’informations d’être bien alignés les uns sous les autres.*/

/*On utilise align-items: center pour centrer les éléments en hauteur au cas où certains prendraient plusieurs lignes.*/

.contact-flex{
  display: flex;
  flex-flow: row wrap;
  align-items: center;
  margin-top: 15px;
  
}
.contact-flex p:first-child{
  flex: 0 0 40%;
}
.contact-flex p:last-child{
  flex: 0 0 60%;
}
.social{
  display: flex;
  justify-content: space-around;
  margin: 10px auto 0px auto;
}
.social img{
  width: 40px;
  height: 40px;
}

  
}